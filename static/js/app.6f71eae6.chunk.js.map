{"version":3,"sources":["src/repository/repository.ts","src/features/new-incident/components/CurrentHelperNumber.tsx","src/features/new-incident/components/CurrentHelperNumberCircle.tsx","src/features/new-incident/components/MessageInfoBox.tsx","src/features/new-incident/components/RolesPicker.tsx","src/features/new-incident/components/SkillsPicker.tsx","src/features/new-incident/components/SectionHeadline.tsx","src/features/new-incident/components/FieldWithHeading.tsx","src/features/new-incident/components/AdressMapView.tsx","src/features/new-incident/components/IncidentInput.tsx","src/components/layout/index.tsx","src/components/left-menu/index.tsx","src/features/incident-details/index.tsx","src/features/all-incidents/index.tsx","src/navigation/index.tsx","App.tsx","web-build/register-service-worker.js"],"names":["Endpoint","RepositoryImpl","service","FetchService","helper","this","createHelper","request","createHelpRequest","matching","findHelpers","notifyHelpers","getHelpRequests","post","Helper","HelpRequest","Promise","resolve","count","skills","skill","id","name","MOCKED_HELPERS","email","phone","postcode","MOCKED_HELPREQUESTS","created_at","date_start","roles","helpers","get","endpoint","mockValue","body","response","HOST","ENDPOINT_PREFIX","CurrentHelperNumber","props","useState","numHelpers","setNumHelpers","helpRequest","stateHelpRequest","repository","useEffect","a","async","longitude","latitude","requiredSkills","undefined","length","fetchNumHelpers","Text","style","fontSize","MessageInfoBox","View","flex","justifyContent","alignItems","padding","backgroundColor","width","height","borderRadius","borderWidth","render","RolesPicker","role","checked","setRoles","updateHelpRequest","finalRoles","filter","item","map","index","newHelpRequest","setHelpRequest","data","renderItem","flexDirection","CheckBox","value","marginRight","onValueChange","newArray","slice","checkRole","SkillsPicker","setSkills","finalSkills","checkSkill","SectionHeadline","children","FieldWithHeading","styles","container","heading","TextInput","onChangeText","text","placeholder","StyleSheet","create","AdressMapView","lat","lng","coords","setCoords","adress","adressString","Geocoder","from","then","json","location","results","geometry","console","log","catch","error","warn","position","top","left","right","bottom","initialRegion","latitudeDelta","longitudeDelta","region","Marker","coordinate","title","description","IncidentInput","setRender","onAdressChange","src","modalCloseComponent","alignContent","onPress","alert","LinearGradient","start","end","colors","margin","paddingHorizontal","textAlign","color","init","maxWidth","Layout","isVisible","setIsVisible","renderButton","TouchableOpacity","borderColor","leftContainer","leftContent","midContainer","midContent","borderRightWidth","borderRightColor","rightContainer","LeftMenu","state","loading","dataSource","loadHelpRequests","nextDataSource","val","isSelected","setState","selectItem","textStyle","selectedItem","paddingLeft","FlatList","hr","v","Component","fontWeight","IncidentDetails","h","tableData","buttonContainer","Button","Alert","paddingTop","paddingBottom","borderStyle","flexArr","head","wrapper","heightArr","row","helperListItem","tableTitle","AllIncidents","initialState","ref","details","Navigator","createStackNavigator","createBrowserApp","App","navigator","window","addEventListener","serviceWorker","register","scope","info"],"mappings":"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","file":"static/js/app.6f71eae6.chunk.js","sourcesContent":["export interface Repository {\n    /**\n     * create a helper\n     *\n     * @param helper the helper to be created. Set id: null to create new user\n     */\n    createHelper(helper: Helper): Promise<Helper>;\n\n    /**\n     * create help request\n     *\n     * @param request the HelpRequest to be created\n     */\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest>;\n\n    /**\n     * find helpers\n     *\n     * @param matching The filter to apply\n     */\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers>;\n\n    /**\n     * notify helpers\n     *\n     * @param matching The filter to apply\n     */\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any>;\n\n    getHelpRequests(): Promise<HelpRequest[]>\n}\n\n/**\n * Currently, this is just a proxy for Service. We could implement some fancy caching strategies here...\n */\nexport class RepositoryImpl implements Repository {\n\n    constructor(private service: Service = new FetchService()) {\n    }\n\n    createHelper(helper: Helper): Promise<Helper> {\n        return this.service.createHelper(helper);\n    }\n\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest> {\n        return this.service.createHelpRequest(request);\n    }\n\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers> {\n        // TODO: we could add some fancy caching strategies here and only fetch using `service` if data doesn't exist or expired\n        return this.service.findHelpers(matching);\n    }\n\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any> {\n        return this.service.notifyHelpers(matching);\n    }\n\n    getHelpRequests(): Promise<HelpRequest[]> {\n        return this.service.getHelpRequests();\n    }\n\n}\n\nenum Endpoint {\n    Helper = \"helper\",\n    HelpRequest = \"HelpRequest\"\n}\n\n/**\n * A service that can be used to fetch data\n */\nexport interface Service {\n    /**\n     * Create a helper\n     *\n     * @param helper\n     */\n    createHelper(helper: Helper): Promise<Helper>\n\n    /**\n     * Create a help request\n     * @param request\n     */\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest>\n\n    /**\n     * find helpers for request\n     * @param matching The filter to apply\n     */\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers>;\n\n    /**\n     * notify helpers matching a previously specified search definition\n     * @param matching The filter to apply\n     */\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any>;\n\n    getHelpRequests(): Promise<HelpRequest[]>\n}\n\n/**\n * An object which represents a query for helpers\n */\ninterface HelperSearchDefinition {\n    /**\n     * the event's latitude\n     */\n    latitude: number;\n    /**\n     * the event's longitude\n     */\n    longitude: number;\n    /**\n     * required skills for this event\n     */\n    requiredSkills: Skill[];\n}\n\nclass FetchService implements Service {\n\n    static HOST = \"http://127.0.0.1/\";\n    static ENDPOINT_PREFIX = \"api/v1/\";\n\n    createHelper(helper: Helper): Promise<Helper> {\n        return this.post(Endpoint.Helper, helper);\n    }\n\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest> {\n        return this.post(Endpoint.HelpRequest, request);\n    }\n\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers> {\n        return Promise.resolve({\n            count: 3,\n            skills: [\n                {\n                    skill: { id: 4, name: \"Erste Hilfe\" },\n                    count: 2\n                },\n                {\n                    skill: { id: 2, name: \"Altenpflege\" },\n                    count: 1\n                }\n            ]\n        });\n    }\n\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any> {\n        return Promise.resolve();\n    }\n\n    getHelpRequests(): Promise<HelpRequest[]> {\n        const MOCKED_HELPERS = [\n            {\n                id: 1,\n                name: \"Hans Gustafson\",\n                email: \"hans@gustafson.de\",\n                phone: \"0151 / 472254841\",\n                postcode: \"23560\"\n            },\n            {\n                id: 2,\n                name: \"Ali Yangürk\",\n                email: \"ali.yangürk@gmail.com\",\n                phone: \"0176 / 572121244\",\n                postcode: \"23558\"\n            },\n            {\n                id: 3,\n                name: \"Tanja Toasterhausen\",\n                email: \"toastertanne@web.de\",\n                phone: \"0162 / 1745124\",\n                postcode: \"23558\"\n            },\n            {\n                id: 4,\n                name: \"Sarah Saarhusen\",\n                email: \"sarah@saarhusen.de\",\n                phone: \"0162 / 2451845\",\n                postcode: \"22574\"\n            },\n        ];\n        const MOCKED_HELPREQUESTS = [\n            {\n                id: 1,\n                name: \"Am Tannenbusch 13\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: MOCKED_HELPERS\n            },\n            {\n                id: 2,\n                name: \"Rapsacker 27\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: MOCKED_HELPERS\n            },\n            {\n                id: 3,\n                name: \"Am Teich 4\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: MOCKED_HELPERS\n            },\n            {\n                id: 4,\n                name: \"Unter den Linden 27\",\n                created_at: \"22.03.2020 17:12 Uhr\",\n                date_start: \"23.03.2020 14:00 Uhr\",\n                roles: [],\n                skills: [],\n                helpers: MOCKED_HELPERS\n            },\n        ];\n        return this.get(Endpoint.HelpRequest, MOCKED_HELPREQUESTS);\n    }\n\n    private get<T>(endpoint: Endpoint, mockValue: T): Promise<T> {\n        return Promise.resolve(mockValue)\n    }\n\n    private post<R>(endpoint: Endpoint, body: any): Promise<R> {\n        // just act as if id was set by the backend :)\n        let response = Object.assign({}, body);\n        response.id = 1;\n        return Promise.resolve(response);\n\n        // TODO: actually perform network request\n\n        /*return fetch(RepositoryImpl.HOST + RepositoryImpl.ENDPOINT_PREFIX + endpoint.toString(), {\n            body: body,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json() as Promise<R>)*/\n    }\n\n}\n\nexport default RepositoryImpl;\n","import React, { Component, useState, useEffect } from \"react\";\nimport { Text, View } from \"react-native\";\nimport RepositoryImpl, { Repository } from \"../../../repository/repository\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  fontSize: number;\n}\n\n/**\n * Current Helper number displays the number of helpers, given\n * a request (to which the number matches)\n */\nexport default function CurrentHelperNumber(props: Props) {\n  const [numHelpers, setNumHelpers] = useState(0);\n  const [stateHelpRequest, setStateHelpRequest] = useState(props.helpRequest);\n\n  let repository: Repository = new RepositoryImpl();\n\n  useEffect(() => {\n    async function fetchNumHelpers() {\n      let helpRequest: HelpRequest = props.helpRequest;\n      let helpers = await repository.findHelpers({\n        longitude: 0,\n        latitude: 0,\n        requiredSkills: helpRequest.skills\n      });\n      if (helpRequest.skills === undefined || helpRequest.skills.length == 0) {\n        setNumHelpers(helpers.count);\n      } else if(helpRequest.skills.length >= 2) {\n        setNumHelpers(1);\n      } else{\n          setNumHelpers(2)\n      }\n    }\n    fetchNumHelpers();\n  }, [stateHelpRequest.skills]);\n\n  /* TODO: for reuse add modifiable style */\n  return <Text style={{ fontSize: props.fontSize }}>{numHelpers}</Text>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button, Picker, CheckBox } from \"react-native\";\nimport { Repository, RepositoryImpl } from \"../../../repository/repository\";\nimport CurrentHelperNumber from \"./CurrentHelperNumber\";\nimport { TextInput, State } from \"react-native-gesture-handler\";\n\nexport interface Props{\n    helpRequest: HelpRequest,\n}\nexport default function MessageInfoBox(props: Props) {\n    return(\n        <View\n            style={{ flex: 1, justifyContent: \"flex-start\", alignItems: \"center\", padding: 5 }}\n          >\n            <View\n              style={{\n                backgroundColor: \"grey\",\n                width: 100,\n                height: 100,\n                borderRadius: 100 / 2,\n                borderWidth: 3,\n                justifyContent: \"center\",\n                alignItems: \"center\"\n              }}\n            >\n              <CurrentHelperNumber\n                helpRequest={props.helpRequest}\n                render={props.render}\n                fontSize={75}\n              />\n            </View>\n        </View>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button, Picker, CheckBox, ShadowPropTypesIOS } from \"react-native\";\nimport { Repository, RepositoryImpl } from \"../../../repository/repository\";\nimport CurrentHelperNumber from \"./CurrentHelperNumber\";\nimport { TextInput, State } from \"react-native-gesture-handler\";\n\nexport default function MessageInfoBox(props) {\n    return(\n        <Text style={{ flex: 3 }}>\n              Melde dich jetzt bei{\" \"}\n              <CurrentHelperNumber\n                helpRequest={props.helpRequest}\n                fontSize={30}\n              />{\" \"}\n              potentiellen Helfern in deiner Nähe. Beschreibe in deiner\n              Nachricht den Einsatz möglichst genau.\n            </Text>\n    );\n}","import React, { useState } from \"react\";\nimport { Text, View, CheckBox } from \"react-native\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  setHelpRequest: any;\n}\n\nexport default function RolesPicker(props: Props) {\n  const [roles, setRoles] = useState([\n    { role: { id: 0, name: \"Pfleger*in\" }, checked: false },\n    { role: { id: 1, name: \"Reinigungskraft\" }, checked: false },\n    { role: { id: 2, name: \"Sanitäter\" }, checked: false },\n    { role: { id: 3, name: \"Noch mehr\" }, checked: false }\n  ]);\n\n  /** helper function for the check boxes */\n  const checkRole = (item, value) => {\n    let prev = roles;\n    let newArray = prev.slice();\n    newArray[item.role.id].checked = value;\n    setRoles(newArray);\n    updateHelpRequest();\n  };\n\n  /** notify state Wrapper (IncidentInput) that the request changed */\n  const updateHelpRequest = () => {\n    let selected = roles.filter(item => {\n      return item.checked === true;\n    });\n    let finalRoles = selected.map( (item, index) => {return item.role});\n    let newHelpRequest = props.helpRequest;\n    newHelpRequest.roles = finalRoles;\n    props.setHelpRequest(newHelpRequest);\n  };\n\n  return (\n    <View style={{ flex: 1, backgroundColor: \"white\" }}>\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"flex-start\",\n          alignItems: \"flex-start\"\n        }}\n      >\n        <Text>Rollen</Text>\n      </View>\n      <View style={{ flex: 10 }}>\n        <FlatList\n          data={roles}\n          renderItem={({ item }) => (\n            <View style={{ flex: 1, flexDirection: \"row\", padding: 5 }}>\n              <CheckBox\n                value={item.checked}\n                style={{marginRight: 5}}\n                onValueChange={value => {\n                  checkRole(item, value);\n                }}\n              />\n              <Text>{item.role.name}</Text>\n            </View>\n          )}\n        />\n      </View>\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Text, View, CheckBox } from \"react-native\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n  setHelpRequest: any;\n}\n\nexport default function SkillsPicker(props: Props) {\n  const [skills, setSkills] = useState([\n    { skill: { id: 0, name: \"Erste Hilfe\" }, checked: false },\n    { skill: { id: 1, name: \"Altenpflege\" }, checked: false },\n    { skill: { id: 2, name: \"Noch mehr\" }, checked: false }\n  ]);\n\n  /** helper function for the check boxes */\n  const checkSkill = (item, value) => {\n    let prev = skills;\n    let newArray = prev.slice();\n    newArray[item.skill.id].checked = value;\n    setSkills(newArray);\n    updateHelpRequest();\n  };\n\n  /** notify state Wrapper (IncidentInput) that the request changed */\n  const updateHelpRequest = () => {\n    let selected = skills.filter(item => {\n      return item.checked === true;\n    });\n    let finalSkills = selected.map( (item, index) => {return item.skill});\n    let newHelpRequest = props.helpRequest;\n    newHelpRequest.skills = finalSkills;\n    //console.log(newHelpRequest);\n    props.setHelpRequest(newHelpRequest);\n  };\n\n  return (\n    <View style={{ flex: 1, backgroundColor: \"white\" }}>\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"flex-start\",\n          alignItems: \"flex-start\"\n        }}\n      >\n        <Text>Skills</Text>\n      </View>\n      <View style={{ flex: 10 }}>\n        <FlatList\n          data={skills}\n          renderItem={({ item }) => (\n            <View style={{ flex: 1, flexDirection: \"row\",padding: 5}}>\n              <CheckBox\n                value={item.checked}\n                style={{marginRight: 5}}\n                onValueChange={value => {\n                  checkSkill(item, value);\n                }}\n              />\n              <Text>{item.skill.name}</Text>\n            </View>\n          )}\n        />\n      </View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Text, View, CheckBox, ShadowPropTypesIOS } from \"react-native\";\n\nexport interface Props {\n  children: React.Component;\n}\nexport default function SectionHeadline(props: Props) {\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"flex-start\" }}>\n      <Text\n        style={{\n          fontSize: 30\n        }}\n      >\n        {props.children}\n      </Text>\n    </View>\n  );\n}\n","import React from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Button,\n  ShadowPropTypesIOS\n} from \"react-native\";\n\nexport interface Props {\n  heading: string;\n  placeholder: string;\n  onChangeText: any;\n}\n\nexport default function FieldWithHeading(props: Props) {\n  return (\n    <View style={styles.container}>\n      <View style={{ flex: 1 }}>\n        <Text style={{ flex: 1 }}>{props.heading}</Text>\n      </View>\n      <View style={{ flex: 1 }}>\n        <TextInput\n          onChangeText={text => props.onChangeText(text)}\n          style={{ borderRadius: 2, borderWidth: 3, padding: 5 }}\n          placeholder={props.placeholder}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 5,\n    flexDirection: \"column\",\n    backgroundColor: \"#fff\"\n  }\n});\n","import React, { useState, useEffect } from \"react\";\nimport MapView from \"react-native-maps\";\nimport Geocoder from \"react-native-geocoding\";\n\nexport interface Props {\n  adressString: string;\n  helpRequest: HelpRequest;\n  updateHelpRequest: any;\n}\n\nGeocoder.init(\"AIzaSyC9cFDJwcroS2OcOO19SVJdYN9OQ6RYBWI\");\n\n/**\n * Renders a *parent-filling* GoogleMap. Listens on the adressString\n * Prop in order to rerender to new Adress, while updating helpRequest \n * with the new coordinates in Order to communicate with the backend\n * @param props \n */\nexport default function AdressMapView(props: Props) {\n  let [coords, setCoords] = useState({ lat: 42, lng: 0.8 });\n  const getGeocodeFromAdress = async (adress: String) => {\n    Geocoder.from(adress)\n      .then(json => {\n        var location = json.results[0].geometry.location;\n        console.log(location);\n        setCoords(location);\n      })\n      .catch(error => console.warn(error));\n  };\n\n  useEffect(() => {\n    getGeocodeFromAdress(props.adressString);\n  }, [props.adressString]);\n\n  return (\n    <MapView\n      style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\n      initialRegion={{\n        latitude: coords.lat,\n        longitude: coords.lng,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      }}\n      region={{\n        latitude: coords.lat,\n        longitude: coords.lng,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      }}\n    >\n      <MapView.Marker\n        coordinate={{latitude: coords.lat, longitude: coords.lng}}\n        title={props.adressString}\n        description={\"This is your location\"}\n      />\n    </MapView>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button, Picker, CheckBox } from \"react-native\";\nimport { Repository, RepositoryImpl } from \"../../../repository/repository\";\nimport CurrentHelperNumberCircle from \"./CurrentHelperNumberCircle\";\nimport {\n  TextInput,\n  State,\n  TouchableOpacity\n} from \"react-native-gesture-handler\";\nimport MessageInfoBox from \"./MessageInfoBox\";\nimport RolesPicker from \"./RolesPicker\";\nimport SkillsPicker from \"./SkillsPicker\";\nimport SectionHeadline from \"./SectionHeadline\";\nimport FieldWithHeading from \"./FieldWithHeading\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport AdressMapView from \"./AdressMapView\";\n\n\nexport interface Props {\n  modalCloseComponent: React.Component;\n}\n\n/**\n * This part should be showing filter options and the number of\n * available helpers matching the criteria\n * If the sorting is sufficient, you should post\n */\nexport default function IncidentInput(props: Props) {\n  let [helpRequest, setHelpRequest] = useState({\n    id: 3,\n    name: \"Babuschka Boi\",\n    roles: [],\n    skills: []\n  });\n\tlet [render, setRender] = useState(false);\n\tlet [adressString, onAdressChange] = useState()\n\n  const updateHelpRequest = (helpRequest: HelpRequest) => {\n    setHelpRequest(helpRequest);\n    setRender(!render);\n    console.log(helpRequest);\n  };\n  return (\n    <View style={styles.container}>\n      <script src=\"https://maps.googleapis.com/maps/api/js?key=<YOUR_GOOGLE_API_KEY>\"></script>\n      {props.modalCloseComponent}\n      <View style={{ flex: 1, flexDirection: \"row\" }}>\n        <SectionHeadline>1. Daten eingeben</SectionHeadline>\n        <SectionHeadline>2. Verfügbare Helfer</SectionHeadline>\n      </View>\n      {/* {helpRequest.skills.map((item) => {return <Text>{item.name}</Text>})} */}\n      <View style={{ flex: 10, flexDirection: \"row\" }}>\n        {/* 1. card */}\n        <View style={{ flex: 1 }}>\n          <View style={{ flex: 1, flexDirection: \"column\" }}>\n            <View\n              style={{\n                flex: 1,\n                backgroundColor: \"white\",\n                justifyContent: \"center\"\n              }}\n            >\n              <View style={{ flex: 1, flexDirection: \"row\" }}>\n                <View style={{ flex: 1 }}>\n                  <FieldWithHeading heading={\"Titel\"} placeholder={\"Titel\"} />\n                  <FieldWithHeading heading={\"Ort\"} placeholder={\"Ort\"} onChangeText={onAdressChange} />\n                </View>\n                <View style={{ flex: 1 }}>\n                  <FieldWithHeading heading={\"Datum\"} placeholder={\"Datum\"}  />\n                  <View\n                    style={{ flex: 1, padding: 5, justifyContent: \"center\" }}\n                  >\n                    <Text style={{}}>Dauer vor. X Stunden</Text>\n                  </View>\n                </View>\n              </View>\n              <View\n                style={{\n                  flex: 1,\n                  flexDirection: \"row\",\n                  backgroundColor: \"white\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                <AdressMapView adressString={adressString} helpRequest={helpRequest} updateHelpRequest={updateHelpRequest}/>\n              </View>\n            </View>\n            <View style={{ flex: 1, justifyContent: \"center\" }}>\n              <Text>Placeholder</Text>\n            </View>\n          </View>\n        </View>\n        {/* 2. card */}\n        <View style={{ flex: 1, flexDirection: \"column\" }}>\n          <View style={{ flex: 2 }}>\n            <View style={{ flex: 3, flexDirection: \"row\" }}>\n              <CurrentHelperNumberCircle\n                helpRequest={helpRequest}\n                render={render}\n              />\n              <RolesPicker\n                helpRequest={helpRequest}\n                setHelpRequest={setHelpRequest}\n              />\n              <SkillsPicker\n                helpRequest={helpRequest}\n                setHelpRequest={updateHelpRequest}\n              />\n            </View>\n          </View>\n          <View style={{ flex: 2 }}>\n            <View style={{ flex: 5, flexDirection: \"row\" }}>\n              <View style={{ flex: 1, backgroundColor: \"white\" }}>\n                <View style={{ flex: 1, alignContent: \"center\" }}>\n                  <Text style={{ alignContent: \"center\", fontSize: 30 }}>\n                    Helfer anfordern\n                  </Text>\n                </View>\n                <MessageInfoBox helpRequest={helpRequest} />\n                {/* <TextInput\n                  multiline={true}\n                  style={{ flex: 3, backgroundColor: \"white\" }}\n                  placeholder={\"Nachricht\"}\n                ></TextInput> */}\n                <TouchableOpacity onPress={() => alert(\"submit\")}>\n                  <LinearGradient\n                    start={[0, 0.5]}\n                    end={[1, 0.5]}\n                    colors={[\"#000\", \"red\"]}\n                    style={{ borderRadius: 5 }}\n                  >\n                    <View\n                      style={{\n                        margin: 1,\n                        backgroundColor: \"white\",\n                        borderRadius: 5\n                      }}\n                    >\n                      <Text\n                        style={{\n                          margin: 4,\n                          paddingHorizontal: 6,\n                          textAlign: \"center\",\n                          backgroundColor: \"white\",\n                          color: \"#000\",\n                          fontSize: 30\n                        }}\n                      >\n                        Jetzt anfordern\n                      </Text>\n                    </View>\n                  </LinearGradient>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    maxWidth: 1024,\n    flexDirection: \"column\",\n    backgroundColor: \"white\"\n  }\n});\n","import React, { useState } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport Modal from \"modal-enhanced-react-native-web\";\nimport IncidentInput from \"../../features/new-incident/components/IncidentInput\";\n\nexport interface Props {\n  leftContent: React.Component;\n  midContent: React.Component;\n  rightContent: React.Component;\n}\n\nexport default function Layout(props: Props) {\n  let [isVisible, setIsVisible] = useState(true);\n\n  let renderButton = (text, onPress) => (\n    <TouchableOpacity onPress={onPress}>\n      <View\n        style={{\n            flex: 1,\n          backgroundColor: \"lightblue\",\n          padding: 12,\n          margin: 16,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderRadius: 4,\n          borderColor: \"rgba(0, 0, 0, 0.1)\"\n        }}\n      >\n        <Text>{text}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  let renderModalContent = () => {\n    return (\n      <View\n        style={{\n            flex: 1,\n          backgroundColor: \"white\",\n          padding: 22,\n          borderRadius: 4,\n          borderColor: \"rgba(0, 0, 0, 0.1)\"\n        }}\n      >\n        <IncidentInput modalCloseComponent={renderButton(\"Close\", () => {\n          setIsVisible(false);\n        })}/>\n      </View>\n    );\n  };\n  return (\n    <View style={styles.container}>\n      <View style={styles.leftContainer}>\n          {props.leftContent}\n          {renderButton(\"+\", () => {\n            setIsVisible(true);\n          })}\n          <Modal isVisible={isVisible}>{renderModalContent()}</Modal>\n          </View>\n      <View style={styles.midContainer}>{props.midContent}</View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  leftContainer: {\n    flex: 1,\n    borderRightWidth: 1,\n    borderRightColor: \"#00000000d3\",\n  },\n  midContainer: {\n    flex: 4,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  rightContainer: {\n    flex: 1,\n  }\n});\n","import React, {Component} from \"react\";\nimport {FlatList, ListRenderItemInfo, StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport {Repository} from \"../../repository/repository\";\n\ninterface HelpRequestData {\n    request: HelpRequest\n    isSelected: boolean\n}\n\ninterface LeftMenuState {\n    loading: boolean\n    dataSource: HelpRequestData[]\n}\n\ninterface LeftMenuProps {\n    repository: Repository\n    selectItem: ((HelpRequest) => void)\n}\n\nexport default class LeftMenu extends Component<LeftMenuProps, LeftMenuState> {\n    constructor(props: LeftMenuProps) {\n        super(props);\n        this.state = { loading: false, dataSource: [] };\n    }\n\n    componentDidMount(): void {\n        this.loadHelpRequests();\n    }\n\n    private selectItem(data: ListRenderItemInfo<HelpRequestData>) {\n        let nextDataSource = this.state.dataSource.map(val => {\n            val.isSelected = val.request.id == data.item.request.id;\n            return val;\n        });\n        this.setState({ dataSource: nextDataSource });\n        this.props.selectItem(data.item.request);\n    }\n\n    renderItem(data: ListRenderItemInfo<HelpRequestData>) {\n        // TODO: TouchableOpacity -> Link?\n        // TODO: Highlight selected\n        let textStyle = data.item.isSelected ? styles.selectedItem : {};\n        return (\n            <TouchableOpacity onPress={() => this.selectItem(data)}>\n                <View style={{padding: 8, paddingLeft: 16}}>\n                    <Text style={textStyle}>\n                        {data.item.request.name}\n                    </Text>\n                    <Text style={textStyle}>\n                        {data.item.request.created_at}\n                    </Text>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n\n    render() {\n        return (\n            <FlatList\n                data={this.state.dataSource}\n                renderItem={item => this.renderItem(item)} />\n        );\n    }\n\n    private loadHelpRequests() {\n        this.setState({ loading: true });\n        this.props\n            .repository\n            .getHelpRequests()\n            .then(hr => this.setState({ loading: false, dataSource: hr.map(v => { return { request: v, isSelected: false } })}));\n    }\n}\n\nconst styles = {\n    selectedItem: {\n        fontWeight: \"bold\"\n    }\n}\n","import {Component, default as React} from \"react\";\nimport {View, Text, Button, Alert, FlatList} from \"react-native\";\nimport { Table, TableWrapper, Row, Rows, Col } from 'react-native-table-component';\n\ninterface IncidentDetailsState {\n    data?: HelpRequest;\n}\n\ninterface IncidentDetailsProps {\n    initialState: IncidentDetailsState\n}\n\nexport default class IncidentDetails extends Component<IncidentDetailsProps, IncidentDetailsState> {\n\n    public setHelpRequest(h: HelpRequest) {\n        this.setState({ data: h });\n    }\n\n    constructor(props: IncidentDetailsProps) {\n        super(props);\n        this.state = { data: null };\n    }\n\n    render() {\n        let state = this.state;\n        if (state == null || state.data == null) {\n            return (\n                <View style={styles.container}>\n                    <Text style={styles.title}>Hey! Bitte wähle links ein Hilfegesuch aus</Text>\n                    <Text>Die Daten werden dann hier angezeigt</Text>\n                </View>\n            );\n        }\n        let tableHeaders = [ \"Name\", \"E-Mail\", \"Telefon\" ];\n        let tableData = state.data.helpers.map(h => [ h.email, h.phone ]);\n        return (\n            <View style={styles.container}>\n                <Text style={styles.title}>{this.state.data.name}</Text>\n                <Text>{this.state.data.date_start}</Text>\n                <View style={styles.buttonContainer}>\n                    <Button\n                        title=\"Download PDF\"\n                        onPress={() => Alert.alert('Left button pressed')}\n                    />\n                    <View\n                    style={{width: 16}}/>\n                    <Button\n                        title=\"Download CSV\"\n                        onPress={() => Alert.alert('Right button pressed')}\n                    />\n                </View>\n                <Text style={{paddingTop: 16, paddingBottom: 16}}>Es haben sich 4 potenzielle Helfer:innen auf dein Gesuch gemeldet</Text>\n                <Table borderStyle={{borderWidth: 1}}>\n                    <Row data={tableHeaders} flexArr={[1, 1, 1]} style={styles.head} textStyle={styles.text}/>\n                    <TableWrapper style={styles.wrapper}>\n                        <Col data={state.data.helpers.map(h => h.name)} style={styles.title} heightArr={[28,28]} textStyle={styles.text}/>\n                        <Rows data={tableData} flexArr={[1, 1]} style={styles.row} textStyle={styles.text}/>\n                    </TableWrapper>\n                </Table>\n            </View>\n        );\n    }\n}\n\nconst styles = {\n    container: {\n        flex: 1,\n    },\n    title: {\n        fontSize: 48,\n        fontWeight: 'bold'\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    helperListItem: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    head: {  height: 40 },\n    wrapper: { flexDirection: 'row' },\n    tableTitle: { flex: 1, backgroundColor: '#f6f8fa' },\n    row: {  height: 28  },\n    text: { textAlign: 'center' }\n};\n","import React, {Component} from \"react\";\nimport Layout from \"../../components/layout\";\nimport LeftMenu from \"../../components/left-menu\";\nimport RepositoryImpl from \"../../repository/repository\";\nimport IncidentDetails from \"../incident-details\";\n\nconst repository = new RepositoryImpl();\n\nexport default class AllIncidents extends Component {\n\n  private details: IncidentDetails;\n  private leftContent = (<LeftMenu repository={repository} selectItem={item => this.selectItem(item)}/>);\n  private midContent = (<IncidentDetails initialState={{data: null }} ref={ref => this.details = ref}/>);\n\n  selectItem(item: HelpRequest) {\n    this.details.setHelpRequest(item);\n  }\n\n  render() {\n    return (\n        <Layout\n            leftContent={this.leftContent}\n            midContent={this.midContent}\n        />\n    );\n  }\n}\n","import { createStackNavigator } from \"react-navigation-stack\";\nimport {createBrowserApp} from '@react-navigation/web';\nimport AllIncidents from \"../features/all-incidents\";\nimport NewIncident from \"../features/new-incident\";\nimport RepositoryImpl from \"../repository/repository\";\n\nconst Navigator = createStackNavigator(\n  {\n    \"Medstaff+\": AllIncidents\n  }\n)\n\nconst container = createBrowserApp(Navigator);\n\nexport default container;\n\n","import React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport Navigator from \"./src/navigation\";\n\n\nexport default function App() {\n    return <Navigator />\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  leftContainer: {\n    flex: 1,\n  },\n  midContainer: {\n    flex: 2,\n  },\n  rightContainer: {\n    flex: 1,\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/helfer-app/expo-service-worker.js', { scope: '/helfer-app/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}