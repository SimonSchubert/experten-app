{"version":3,"sources":["src/repository/repository.ts","src/features/new-incident/components/CurrentHelperNumber.tsx","src/features/new-incident/components/CurrentHelperNumberCircle.tsx","src/features/new-incident/components/MessageInfoBox.tsx","src/features/new-incident/components/RolesPicker.tsx","src/features/new-incident/components/SkillsPicker.tsx","src/features/new-incident/components/SectionHeadline.tsx","src/features/new-incident/components/IncidentInput.tsx","src/components/layout/index.tsx","src/components/left-menu/index.tsx","src/features/incident-details/index.tsx","src/features/all-incidents/index.tsx","src/navigation/index.tsx","App.tsx","web-build/register-service-worker.js"],"names":["Endpoint","RepositoryImpl","service","FetchService","helper","this","createHelper","request","createHelpRequest","matching","findHelpers","notifyHelpers","getHelpRequests","post","Helper","HelpRequest","Promise","resolve","count","skills","skill","id","name","get","roles","endpoint","mockValue","body","response","HOST","ENDPOINT_PREFIX","CurrentHelperNumber","props","useState","numHelpers","setNumHelpers","repository","useEffect","a","async","helpRequest","helpers","fetchNumHelpers","Text","style","fontSize","MessageInfoBox","View","flex","justifyContent","alignItems","backgroundColor","width","height","borderRadius","RolesPicker","CheckBox","value","SkillsPicker","SectionHeadline","children","IncidentInput","styles","container","modalCloseComponent","flexDirection","margin","padding","placeholder","multiline","Button","onPress","alert","title","StyleSheet","create","maxWidth","Layout","isVisible","setIsVisible","renderButton","text","TouchableOpacity","borderColor","leftContainer","leftContent","midContainer","midContent","rightContainer","LeftMenu","state","loading","dataSource","loadHelpRequests","data","nextDataSource","map","val","isSelected","item","setState","selectItem","selectedItem","FlatList","renderItem","then","hr","v","Component","fontWeight","IncidentDetails","h","AllIncidents","initialState","ref","details","setHelpRequest","Navigator","createStackNavigator","Suche","Antworten","createBrowserApp","App","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","error","console"],"mappings":"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","file":"static/js/app.291c7651.chunk.js","sourcesContent":["export interface Repository {\n    /**\n     * create a helper\n     *\n     * @param helper the helper to be created. Set id: null to create new user\n     */\n    createHelper(helper: Helper): Promise<Helper>;\n\n    /**\n     * create help request\n     *\n     * @param request the HelpRequest to be created\n     */\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest>;\n\n    /**\n     * find helpers\n     *\n     * @param matching The filter to apply\n     */\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers>;\n\n    /**\n     * notify helpers\n     *\n     * @param matching The filter to apply\n     */\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any>;\n\n    getHelpRequests(): Promise<HelpRequest[]>\n}\n\n/**\n * Currently, this is just a proxy for Service. We could implement some fancy caching strategies here...\n */\nexport class RepositoryImpl implements Repository {\n\n    constructor(private service: Service = new FetchService()) {\n    }\n\n    createHelper(helper: Helper): Promise<Helper> {\n        return this.service.createHelper(helper);\n    }\n\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest> {\n        return this.service.createHelpRequest(request);\n    }\n\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers> {\n        // TODO: we could add some fancy caching strategies here and only fetch using `service` if data doesn't exist or expired\n        return this.service.findHelpers(matching);\n    }\n\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any> {\n        return this.service.notifyHelpers(matching);\n    }\n\n    getHelpRequests(): Promise<HelpRequest[]> {\n        return this.service.getHelpRequests();\n    }\n\n}\n\nenum Endpoint {\n    Helper = \"helper\",\n    HelpRequest = \"HelpRequest\"\n}\n\n/**\n * A service that can be used to fetch data\n */\nexport interface Service {\n    /**\n     * Create a helper\n     *\n     * @param helper\n     */\n    createHelper(helper: Helper): Promise<Helper>\n\n    /**\n     * Create a help request\n     * @param request\n     */\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest>\n\n    /**\n     * find helpers for request\n     * @param matching The filter to apply\n     */\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers>;\n\n    /**\n     * notify helpers matching a previously specified search definition\n     * @param matching The filter to apply\n     */\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any>;\n\n    getHelpRequests(): Promise<HelpRequest[]>\n}\n\n/**\n * An object which represents a query for helpers\n */\ninterface HelperSearchDefinition {\n    /**\n     * the event's latitude\n     */\n    latitude: number;\n    /**\n     * the event's longitude\n     */\n    longitude: number;\n    /**\n     * required skills for this event\n     */\n    requiredSkills: Skill[];\n}\n\nclass FetchService implements Service {\n\n    static HOST = \"http://127.0.0.1/\";\n    static ENDPOINT_PREFIX = \"api/v1/\";\n\n    createHelper(helper: Helper): Promise<Helper> {\n        return this.post(Endpoint.Helper, helper);\n    }\n\n    createHelpRequest(request: HelpRequest): Promise<HelpRequest> {\n        return this.post(Endpoint.HelpRequest, request);\n    }\n\n    findHelpers(matching: HelperSearchDefinition): Promise<HelpRequestHelpers> {\n        return Promise.resolve({\n            count: 3,\n            skills: [\n                {\n                    skill: { id: 4, name: \"Erste Hilfe\" },\n                    count: 2\n                },\n                {\n                    skill: { id: 2, name: \"Altenpflege\" },\n                    count: 1\n                }\n            ]\n        });\n    }\n\n    notifyHelpers(matching: HelperSearchDefinition): Promise<any> {\n        return Promise.resolve();\n    }\n\n    getHelpRequests(): Promise<HelpRequest[]> {\n        const MOCKED_HELPREQUESTS = [\n            { id: 1, name: \"Am Tannenbusch 13\", roles: [], skills: [] },\n            { id: 2, name: \"Rapsacker 27\", roles: [], skills: [] },\n            { id: 3, name: \"Am Teich 4\", roles: [], skills: [] },\n            { id: 4, name: \"Unter den Linden 27\", roles: [], skills: [] },\n        ];\n        return this.get(Endpoint.HelpRequest, MOCKED_HELPREQUESTS);\n    }\n\n    private get<T>(endpoint: Endpoint, mockValue: T): Promise<T> {\n        return Promise.resolve(mockValue)\n    }\n\n    private post<R>(endpoint: Endpoint, body: any): Promise<R> {\n        // just act as if id was set by the backend :)\n        let response = Object.assign({}, body);\n        response.id = 1;\n        return Promise.resolve(response);\n\n        // TODO: actually perform network request\n\n        /*return fetch(RepositoryImpl.HOST + RepositoryImpl.ENDPOINT_PREFIX + endpoint.toString(), {\n            body: body,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json() as Promise<R>)*/\n    }\n\n}\n\nexport default RepositoryImpl;\n","import React, { Component, useState, useEffect } from \"react\";\nimport { Text, View } from \"react-native\";\nimport RepositoryImpl, { Repository } from \"../../../repository/repository\";\n\n\nexport interface Props{\n    helpRequest: HelpRequest,\n    fontSize: number,\n}\n\n/**\n * Current Helper number displays the number of helpers, given\n * a request (to which the number matches)\n */\nexport default function CurrentHelperNumber(props: Props) {\n  const [numHelpers, setNumHelpers] = useState(0);\n\n  let repository: Repository = new RepositoryImpl();\n\n  useEffect(() => {\n    async function fetchNumHelpers() {\n      let helpRequest: HelpRequest = props.helpRequest;\n      let helpers = await repository.findHelpers(helpRequest);\n      setNumHelpers(helpers.count);\n    }\n    fetchNumHelpers();\n  }, []);\n\n  /* TODO: for reuse add modifiable style */\n  return (\n      <Text style={{ fontSize: props.fontSize }}>{numHelpers}</Text>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button, Picker, CheckBox } from \"react-native\";\nimport { Repository, RepositoryImpl } from \"../../../repository/repository\";\nimport CurrentHelperNumber from \"./CurrentHelperNumber\";\nimport { TextInput, State } from \"react-native-gesture-handler\";\n\nexport interface Props{\n    helpRequest: HelpRequest,\n}\nexport default function MessageInfoBox(props: Props) {\n    return(\n        <View\n            style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}\n          >\n            <View\n              style={{\n                backgroundColor: \"grey\",\n                width: 100,\n                height: 100,\n                borderRadius: 100 / 2,\n                justifyContent: \"center\",\n                alignItems: \"center\"\n              }}\n            >\n              <CurrentHelperNumber\n                helpRequest={props.helpRequest}\n                fontSize={100}\n              />\n            </View>\n        </View>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button, Picker, CheckBox } from \"react-native\";\nimport { Repository, RepositoryImpl } from \"../../../repository/repository\";\nimport CurrentHelperNumber from \"./CurrentHelperNumber\";\nimport { TextInput, State } from \"react-native-gesture-handler\";\n\nexport default function MessageInfoBox() {\n    return(\n        <Text style={{ flex: 1 }}>\n              Melde dich jetzt bei{\" \"}\n              <CurrentHelperNumber\n                helpRequest={{ id: \"3\", name: \"Babuschka Boi\" }}\n                fontSize={30}\n              />{\" \"}\n              potentiellen Helfern in deiner Nähe. Beschreibe in deiner\n              Nachricht den Einsatz möglichst genau.\n            </Text>\n    );\n}","import React from \"react\";\nimport { Text, View, CheckBox } from \"react-native\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n}\nexport default function RolesPicker() {\n  return (\n    <View style={{ flex: 1, backgroundColor: \"green\" }}>\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <Text>Rollen</Text>\n      </View>\n      <View style={{ flex: 1 }}>\n        <CheckBox value={true} />\n      </View>\n    </View>\n  );\n}\n","import React, {  } from \"react\";\nimport { Text, View, CheckBox } from \"react-native\";\n\nexport interface Props {\n  helpRequest: HelpRequest;\n}\nexport default function SkillsPicker() {\n  return (\n    <View style={{ flex: 1, backgroundColor: \"grey\" }}>\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <Text>Skills</Text>\n      </View>\n      <View style={{ flex: 1 }}>\n        <CheckBox value={true} />\n      </View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { Text, View, CheckBox, ShadowPropTypesIOS } from \"react-native\";\n\nexport interface Props {\n  children: React.Component;\n}\nexport default function SectionHeadline(props: Props) {\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <Text\n        style={{\n          fontSize: 30\n        }}\n      >\n        {props.children}\n      </Text>\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button, Picker, CheckBox } from \"react-native\";\nimport { Repository, RepositoryImpl } from \"../../../repository/repository\";\nimport CurrentHelperNumberCircle from \"./CurrentHelperNumberCircle\";\nimport { TextInput, State } from \"react-native-gesture-handler\";\nimport MessageInfoBox from \"./MessageInfoBox\";\nimport RolesPicker from \"./RolesPicker\";\nimport SkillsPicker from \"./SkillsPicker\";\nimport SectionHeadline from \"./SectionHeadline\";\n\n\nexport interface Props{\n\tmodalCloseComponent: React.Component,\n}\n\n/**\n * This part should be showing filter options and the number of\n * available helpers matching the criteria\n * If the sorting is sufficient, you should post\n */\nexport default function IncidentInput(props: Props) {\n  let [helpRequest, setHelpRequest] = useState({\n    id: \"3\",\n    name: \"Babuschka Boi\"\n  });\n\n  return (\n    <View style={styles.container}>\n\t\t\t{props.modalCloseComponent}\n      {/* 1. card */}\n      <View style={{ flex: 1 }}>\n        <SectionHeadline>1. Wo?</SectionHeadline>\n        <View style={{ flex: 3, flexDirection: \"column\" }}>\n          <View\n            style={{\n              flex: 2,\n              backgroundColor: \"green\",\n              justifyContent: \"center\"\n            }}\n          >\n            <TextInput\n              style={{ flex: 1, backgroundColor: \"white\", margin: 5, borderRadius: 5, padding: 5}}\n              placeholder={\"Titel\"}\n            />\n            <TextInput\n              style={{ flex: 1, backgroundColor: \"white\", margin: 5, padding: 5, borderRadius: 5 }}\n\t\t\t\t\t\t\tplaceholder={\"Addresse\"}\n            />\n          </View>\n          <View style={{ flex: 1, backgroundColor: \"grey\", justifyContent: \"center\", alignItems: \"center\" }}>\n            <Text>Maps input</Text>\n          </View>\n        </View>\n      </View>\n      {/* 2. card */}\n      <View style={{ flex: 2 }}>\n        <SectionHeadline>2. Deine Helfer</SectionHeadline>\n        <View style={{ flex: 3, flexDirection: \"row\" }}>\n          <CurrentHelperNumberCircle helpRequest={helpRequest}/>\n          <RolesPicker helpRequest={helpRequest}/>\n          <SkillsPicker helpRequest={helpRequest}/>\n        </View>\n      </View>\n      {/* 3. card */}\n      <View style={{ flex: 2 }}>\n        <SectionHeadline>3. Helfer anfordern</SectionHeadline>\n        <View style={{ flex: 5, flexDirection: \"row\" }}>\n          <View style={{ flex: 1, backgroundColor: \"green\" }}>\n            <MessageInfoBox />\n            <TextInput\n              multiline={true}\n              style={{ flex: 3, backgroundColor: \"white\" }}\n              placeholder={\"Nachricht\"}\n            ></TextInput>\n            <Button\n              style={{ flex: 1 }}\n              onPress={() => alert(\"submit\")}\n              title={\"Jetzt senden\"}\n            />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    \n\t\tmaxWidth: 1024,\n    flexDirection: \"column\",\n    backgroundColor: \"white\"\n  }\n});\n","import React, { useState } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport Modal from \"modal-enhanced-react-native-web\";\nimport IncidentInput from \"../../features/new-incident/components/IncidentInput\";\n\nexport interface Props {\n  leftContent: React.Component;\n  midContent: React.Component;\n  rightContent: React.Component;\n}\n\nexport default function Layout(props: Props) {\n  let [isVisible, setIsVisible] = useState(false);\n\n  let renderButton = (text, onPress) => (\n    <TouchableOpacity onPress={onPress}>\n      <View\n        style={{\n            flex: 1,\n          backgroundColor: \"lightblue\",\n          padding: 12,\n          margin: 16,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderRadius: 4,\n          borderColor: \"rgba(0, 0, 0, 0.1)\"\n        }}\n      >\n        <Text>{text}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  let renderModalContent = () => {\n    return (\n      <View\n        style={{\n            flex: 1,\n          backgroundColor: \"white\",\n          padding: 22,\n          borderRadius: 4,\n          borderColor: \"rgba(0, 0, 0, 0.1)\"\n        }}\n      >\n        <IncidentInput modalCloseComponent={renderButton(\"Close\", () => {\n          setIsVisible(false);\n        })}/>\n      </View>\n    );\n  };\n  return (\n    <View style={styles.container}>\n      <View style={styles.leftContainer}>\n          {props.leftContent}\n          {renderButton(\"+\", () => {\n            setIsVisible(true);\n          })}\n          <Modal isVisible={isVisible}>{renderModalContent()}</Modal>\n          </View>\n      <View style={styles.midContainer}>{props.midContent}</View>\n      {/* {\n        <View style={styles.rightContainer}>\n          \n        </View>\n      } */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    backgroundColor: \"#fff\"\n  },\n  leftContainer: {\n    flex: 1,\n    backgroundColor: \"#aaa\"\n  },\n  midContainer: {\n    flex: 4,\n    flexDirection: \"column\",\n    backgroundColor: \"red\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  rightContainer: {\n    flex: 1,\n    backgroundColor: \"#aaa\"\n  }\n});\n","import React, {Component} from \"react\";\nimport {FlatList, ListRenderItemInfo, StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport {Repository} from \"../../repository/repository\";\n\ninterface HelpRequestData {\n    request: HelpRequest\n    isSelected: boolean\n}\n\ninterface LeftMenuState {\n    loading: boolean\n    dataSource: HelpRequestData[]\n}\n\ninterface LeftMenuProps {\n    repository: Repository\n    selectItem: ((HelpRequest) => void)\n}\n\nexport default class LeftMenu extends Component<LeftMenuProps, LeftMenuState> {\n    constructor(props: LeftMenuProps) {\n        super(props);\n        this.state = { loading: false, dataSource: [] };\n    }\n\n    componentDidMount(): void {\n        this.loadHelpRequests();\n    }\n\n    private selectItem(data: ListRenderItemInfo<HelpRequestData>) {\n        let nextDataSource = this.state.dataSource.map(val => {\n            val.isSelected = val.request.id == data.item.request.id;\n            return val;\n        });\n        this.setState({ dataSource: nextDataSource });\n        this.props.selectItem(data.item.request);\n    }\n\n    renderItem(data: ListRenderItemInfo<HelpRequestData>) {\n        // TODO: TouchableOpacity -> Link?\n        // TODO: Highlight selected\n        let style = data.item.isSelected ? styles.selectedItem : {};\n        return (\n            <TouchableOpacity onPress={() => this.selectItem(data)}>\n                <Text style={style}>{data.item.request.name}</Text>\n            </TouchableOpacity>\n        );\n    }\n\n    render() {\n        return (\n            <FlatList\n                data={this.state.dataSource}\n                renderItem={item => this.renderItem(item)} />\n        );\n    }\n\n    private loadHelpRequests() {\n        this.setState({ loading: true });\n        this.props\n            .repository\n            .getHelpRequests()\n            .then(hr => this.setState({ loading: false, dataSource: hr.map(v => { return { request: v, isSelected: false } })}));\n    }\n}\n\nconst styles = {\n    selectedItem: {\n        fontWeight: \"bold\"\n    }\n}\n","import {Component, default as React} from \"react\";\nimport {View, Text} from \"react-native\";\n\ninterface IncidentDetailsState {\n    data?: HelpRequest;\n}\n\ninterface IncidentDetailsProps {\n    initialState: IncidentDetailsState\n}\n\nexport default class IncidentDetails extends Component<IncidentDetailsProps, IncidentDetailsState> {\n\n    public setHelpRequest(h: HelpRequest) {\n        this.setState({ data: h });\n    }\n\n    constructor(props: IncidentDetailsProps) {\n        super(props);\n        this.state = { data: null };\n    }\n\n    render() {\n        if (this.state == null || this.state.data == null) {\n            return (<View/>);\n        }\n        return (<View><Text style={styles.title}>{this.state.data.name}</Text></View>);\n    }\n}\n\nconst styles = {\n    title: {\n        fontSize: 24,\n        fontWeight: \"bold\"\n    }\n}\n","import React, {Component} from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport Layout from \"../../components/layout\";\nimport LeftMenu from \"../../components/left-menu\";\nimport RepositoryImpl from \"../../repository/repository\";\nimport IncidentDetails from \"../incident-details\";\n\nconst repository = new RepositoryImpl();\n\nexport default class AllIncidents extends Component {\n\n  private details: IncidentDetails;\n  private leftContent = (<LeftMenu repository={repository} selectItem={item => this.selectItem(item)}/>);\n  private midContent = (<IncidentDetails initialState={{data: null }} ref={ref => this.details = ref}/>);\n\n  selectItem(item: HelpRequest) {\n    this.details.setHelpRequest(item);\n  }\n\n  render() {\n    return (\n        <Layout\n            leftContent={this.leftContent}\n            midContent={this.midContent}\n        />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    backgroundColor: \"#fff\"\n  }\n});\n","import { createStackNavigator } from \"react-navigation-stack\";\nimport {createBrowserApp} from '@react-navigation/web';\nimport AllIncidents from \"../features/all-incidents\";\nimport NewIncident from \"../features/new-incident\";\nimport RepositoryImpl from \"../repository/repository\";\n\nconst Navigator = createStackNavigator(\n  {\n    Suche: AllIncidents,\n    Antworten: AllIncidents\n  }\n)\n\nconst container = createBrowserApp(Navigator);\n\nexport default container;\n\n","import React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport Navigator from \"./src/navigation\";\n\n\nexport default function App() {\n    return <Navigator />\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    backgroundColor: \"#fff\"\n  },\n  leftContainer: {\n    flex: 1,\n    backgroundColor: \"#aaa\"\n  },\n  midContainer: {\n    flex: 2,\n    backgroundColor: \"red\"\n  },\n  rightContainer: {\n    flex: 1,\n    backgroundColor: \"#aaa\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/helfer-app/expo-service-worker.js', { scope: '/helfer-app/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}